/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import characterviewer.CharacterViewer;
import controller.Controller;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import model.ChineseCharacter;
import model.DataLoader;

/**
 *
 * @author renatojuniortmp
 */
public class Display extends javax.swing.JFrame {

    private Controller controller;
    private Color defaultColor;
    private ActionListener updateDisplayListener;
    private Timer updateDisplayTimer;

    /**
     * Creates new form Display
     * @param controller
     */
    public Display(Controller controller) {
        initComponents();
        this.controller = controller;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        characterLabel = new javax.swing.JLabel();
        pinyinLabel = new javax.swing.JLabel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        answerInput = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        checkButton = new javax.swing.JButton();
        countLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chinese Characters");
        setResizable(false);

        characterLabel.setFont(new java.awt.Font("Noto Sans CJK SC Bold", 0, 128)); // NOI18N
        characterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        characterLabel.setText("汉字");

        pinyinLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pinyinLabel.setText("Pinyin");

        prevButton.setText("Previous");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        answerInput.setToolTipText("Type in the character Pinyin");
        answerInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerInputActionPerformed(evt);
            }
        });
        answerInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                answerInputKeyPressed(evt);
            }
        });

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        descriptionLabel.setText("Description");

        checkButton.setText("Check");
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        countLabel.setText("jLabel4");

        jMenu1.setText("File");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Always Show Pinyin and Description");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Characters");

        jMenuItem2.setText("Reset");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(characterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
                    .addComponent(pinyinLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(answerInput)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(160, 160, 160)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(countLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(countLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(characterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pinyinLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(answerInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevButton)
                    .addComponent(nextButton)
                    .addComponent(checkButton))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        controller.backward();
        updateDisplay();
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        controller.forward();
        updateDisplay();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        controller.changeShowPinyinAndDescription();
        this.jCheckBoxMenuItem1.setSelected(controller.isShowPinyinAndDescription());
        controlPinyinDescription();
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        if (!controller.isCurrentPositionCorrect() && !answerInput.getText().isEmpty()) {
            controller.checkAnswer(answerInput.getText());
            if (!controller.isCurrentPositionCorrect()) {
//                JOptionPane.showMessageDialog(rootPane, "Incorrect!");
                this.getContentPane().setBackground(Color.red);
                this.updateDisplayTimer.start();
            } else {
                updateDisplay();
                controller.forward();
                this.updateDisplayTimer.start();
            }
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void answerInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_answerInputKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (controller.isCurrentPositionCorrect()){
                controller.forward();
                updateDisplay();
            } else {
                this.checkButton.doClick();
            }
        }
    }//GEN-LAST:event_answerInputKeyPressed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        controller.resetCorrectState();
        updateDisplay();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void answerInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerInputActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JOptionPane.showMessageDialog(this, "<html><h1> Chinese Characters Practice App - v"+CharacterViewer.VERSION+"</h1><h4>Developed py Renato.</h4><h4>renato.junior@dcc.ufmg.br</h4></html>");
    }//GEN-LAST:event_jMenuItem3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerInput;
    private javax.swing.JLabel characterLabel;
    private javax.swing.JButton checkButton;
    private javax.swing.JLabel countLabel;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel pinyinLabel;
    private javax.swing.JButton prevButton;
    // End of variables declaration//GEN-END:variables

    public void initializeDisplay() {
        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, DataLoader.readFont("SimSun.ttf"));

            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(font);

            font = font.deriveFont(128f);
            this.characterLabel.setFont(font);
        } catch (FontFormatException | IOException ex) {
            System.out.println("Um erro ocorreu! " + ex.getMessage());
        }
        this.jCheckBoxMenuItem1.setSelected(controller.isShowPinyinAndDescription());
        this.defaultColor = this.getContentPane().getBackground();
        updateDisplay();
        controlPinyinDescription();
        
        // Wrong answer timer
        this.updateDisplayListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                updateDisplay();
            }
        };
        
        this.updateDisplayTimer = new Timer(250, this.updateDisplayListener);
        this.updateDisplayTimer.setRepeats(false);
        
    }

    private void updateDisplay() {
        if (controller.getCurrentCharacter() != null) {
            this.characterLabel.setText(controller.getCurrentCharacter().getCharacter());
            this.pinyinLabel.setText(controller.getCurrentCharacter().getPinyin());
            this.descriptionLabel.setText(controller.getCurrentCharacter().getDescription());
            if (controller.isCurrentPositionCorrect()) {
                this.getContentPane().setBackground(Color.green);
                this.answerInput.setEditable(false);
                this.answerInput.setText(controller.getCurrentCharacter().getPinyin());
            } else {
                this.getContentPane().setBackground(this.defaultColor);
                this.answerInput.setEditable(true);
                this.answerInput.setText("");
            }
            this.countLabel.setText(Integer.toString(controller.getCurrentPosition()+1)+"/"+Integer.toString(controller.getCharacterCount()));
            controlPinyinDescription();
        }
    }

    private void controlPinyinDescription() {
        this.pinyinLabel.setVisible(controller.isShowPinyinAndDescription() || controller.isCurrentPositionCorrect());
        this.descriptionLabel.setVisible(controller.isShowPinyinAndDescription() || controller.isCurrentPositionCorrect());
    }
}
